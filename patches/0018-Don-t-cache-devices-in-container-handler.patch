From d17cd5559d927f98df8225102e249ce92727f537 Mon Sep 17 00:00:00 2001
From: Thomas Orozco <thomas@orozco.fr>
Date: Fri, 8 Apr 2016 22:20:03 +0200
Subject: [PATCH] Don't cache devices in container handler

---
 container/docker/handler.go | 46 ++++++++++++++++++++++++---------------------
 1 file changed, 25 insertions(+), 21 deletions(-)

diff --git a/container/docker/handler.go b/container/docker/handler.go
index a719ee3..b30ff98 100644
--- a/container/docker/handler.go
+++ b/container/docker/handler.go
@@ -66,7 +66,10 @@ type dockerContainerHandler struct {
 	// Metadata associated with the container.
 	labels  map[string]string
 	envs    map[string]string
-	devices map[string]bool // (a set)
+
+	// The directories in use by this container
+	baseDirs  []string
+	extraDirs []string
 
 	// The container PID used to switch namespaces as required
 	pid int
@@ -153,7 +156,6 @@ func newDockerContainerHandler(
 		storageDriver:      storageDriver,
 		fsInfo:             fsInfo,
 		rootFs:             rootFs,
-		devices:            make(map[string]bool),
 		envs:               make(map[string]string),
 		ignoreMetrics:      ignoreMetrics,
 	}
@@ -182,17 +184,17 @@ func newDockerContainerHandler(
 		}
 	}
 
-	baseDirs := make([]string, 0)
-	extraDirs := make([]string, 0)
+	handler.baseDirs = make([]string, 0)
+	handler.extraDirs = make([]string, 0)
 
 	// Docker 1.10
 	for _, mount := range ctnr.Mounts {
-		baseDirs = append(baseDirs, path.Join(rootFs, mount.Source))
+		handler.baseDirs = append(handler.baseDirs, path.Join(rootFs, mount.Source))
 	}
 
 	// Older Docker (TODO: Check actual versions)
 	for _, hostPath := range ctnr.Volumes {
-		baseDirs = append(baseDirs, path.Join(rootFs, hostPath))
+		handler.baseDirs = append(handler.baseDirs, path.Join(rootFs, hostPath))
 	}
 
 	// Now, handle the rootfs
@@ -206,29 +208,19 @@ func newDockerContainerHandler(
 
 	// We support (and found) the mount
 	if rootfsStorageDir != "" {
-		baseDirs = append(baseDirs, rootfsStorageDir)
+		handler.baseDirs = append(handler.baseDirs, rootfsStorageDir)
 	} else {
 		glog.Warningf("Unable to find root mount for container %q (storageDriver: %q)", name, storageDriver)
 	}
 
 	// Now, handle the storage dir
 	logsStorageDir := path.Join(storageDir, pathToContainersLogDir, id)
-	extraDirs = append(extraDirs, logsStorageDir)
-
-	// TODO: Check this actually works as I expect it
-	for _, baseDir := range append(baseDirs, extraDirs...) {
-		fsDevice, err := fsInfo.GetDirFsDevice(baseDir)
-		if err != nil {
-			glog.Warningf("Unable to find device for %q mounted in %q: %v", baseDir, name, err)
-			continue
-		}
-		handler.devices[fsDevice.Device] = true
-	}
+	handler.extraDirs = append(handler.extraDirs, logsStorageDir)
 
 	// And start DiskUsageMetrics (if enabled)
 	if !ignoreMetrics.Has(container.DiskUsageMetrics) {
 		// We need to find all our base dirs!
-		handler.fsHandler = newFsHandler(time.Minute, baseDirs, []string{logsStorageDir}, fsInfo)
+		handler.fsHandler = newFsHandler(time.Minute, handler.baseDirs, handler.extraDirs, fsInfo)
 	}
 
 	return handler, nil
@@ -385,8 +377,20 @@ func (self *dockerContainerHandler) getFsStats(stats *info.ContainerStats) error
 		}
 	}
 
-	// Now, iterate over all of volumes, and the relevant volumes in.
-	for device := range self.devices {
+	// Now, figure out what devices we *actually* care about. We can't cache this because
+	// devices can change across iterations.
+	devices := make(map[string]bool)
+	for _, dir := range append(self.baseDirs, self.extraDirs...) {
+		fsDevice, err := self.fsInfo.GetDirFsDevice(dir)
+		if err != nil {
+			glog.Warningf("Unable to find device for %q mounted in %q: %v", dir, self.name, err)
+			continue
+		}
+		devices[fsDevice.Device] = true
+	}
+
+	// Now, iterate over all of volumes, and report the relevant ones.
+	for device := range devices {
 		stat, ok := deviceToFsStat[device]
 		if !ok {
 			return fmt.Errorf("Unable to find stats to report for device %s", device)
-- 
2.7.4

